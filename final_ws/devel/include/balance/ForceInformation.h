// Generated by gencpp from file balance/ForceInformation.msg
// DO NOT EDIT!


#ifndef BALANCE_MESSAGE_FORCEINFORMATION_H
#define BALANCE_MESSAGE_FORCEINFORMATION_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace balance
{
template <class ContainerAllocator>
struct ForceInformation_
{
  typedef ForceInformation_<ContainerAllocator> Type;

  ForceInformation_()
    : left()
    , right()
    , front()
    , back()  {
    }
  ForceInformation_(const ContainerAllocator& _alloc)
    : left(_alloc)
    , right(_alloc)
    , front(_alloc)
    , back(_alloc)  {
  (void)_alloc;
    }



   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _left_type;
  _left_type left;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _right_type;
  _right_type right;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _front_type;
  _front_type front;

   typedef std::vector<int16_t, typename ContainerAllocator::template rebind<int16_t>::other >  _back_type;
  _back_type back;





  typedef boost::shared_ptr< ::balance::ForceInformation_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::balance::ForceInformation_<ContainerAllocator> const> ConstPtr;

}; // struct ForceInformation_

typedef ::balance::ForceInformation_<std::allocator<void> > ForceInformation;

typedef boost::shared_ptr< ::balance::ForceInformation > ForceInformationPtr;
typedef boost::shared_ptr< ::balance::ForceInformation const> ForceInformationConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::balance::ForceInformation_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::balance::ForceInformation_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace balance

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/kinetic/share/std_msgs/cmake/../msg'], 'balance': ['/home/cc/ee106b/sp22/class/ee106b-acg/Desktop/projects/final_ws/src/balance/msg'], 'geometry_msgs': ['/opt/ros/kinetic/share/geometry_msgs/cmake/../msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::balance::ForceInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::balance::ForceInformation_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balance::ForceInformation_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::balance::ForceInformation_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balance::ForceInformation_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::balance::ForceInformation_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::balance::ForceInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "94026a7e62b0f33847933ce7f6424b24";
  }

  static const char* value(const ::balance::ForceInformation_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x94026a7e62b0f338ULL;
  static const uint64_t static_value2 = 0x47933ce7f6424b24ULL;
};

template<class ContainerAllocator>
struct DataType< ::balance::ForceInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "balance/ForceInformation";
  }

  static const char* value(const ::balance::ForceInformation_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::balance::ForceInformation_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int16[] left\n\
int16[] right\n\
int16[] front\n\
int16[] back\n\
";
  }

  static const char* value(const ::balance::ForceInformation_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::balance::ForceInformation_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.left);
      stream.next(m.right);
      stream.next(m.front);
      stream.next(m.back);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ForceInformation_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::balance::ForceInformation_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::balance::ForceInformation_<ContainerAllocator>& v)
  {
    s << indent << "left[]" << std::endl;
    for (size_t i = 0; i < v.left.size(); ++i)
    {
      s << indent << "  left[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.left[i]);
    }
    s << indent << "right[]" << std::endl;
    for (size_t i = 0; i < v.right.size(); ++i)
    {
      s << indent << "  right[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.right[i]);
    }
    s << indent << "front[]" << std::endl;
    for (size_t i = 0; i < v.front.size(); ++i)
    {
      s << indent << "  front[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.front[i]);
    }
    s << indent << "back[]" << std::endl;
    for (size_t i = 0; i < v.back.size(); ++i)
    {
      s << indent << "  back[" << i << "]: ";
      Printer<int16_t>::stream(s, indent + "  ", v.back[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // BALANCE_MESSAGE_FORCEINFORMATION_H
